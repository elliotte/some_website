---
layout: post
title:  "Recon methodology pentesting by Jason Haddix"
date:   2021-01-08
categories: code software learning hacking programming pentest
video: true
vid_link: //www.youtube.com/watch?v=uKWu6yhnhbQ
---

Build attack service, scanning for quick wins and manual hacking priorities/targets.

- Build seeds and roots
	- Acquisitions sub 2-years(CRUNCHBASE)

	-  ASNs (https://bgp.he.net/)

	-  Do `amass` on ASN
		`cat domains.txt | xargs -n1 -I{} sh -c 'sudo amass intel -d {} >> amass-intel-output.txt'`
		`sudo amass intel -asn #num`
		`sudo amass intel -d domain`
		https://danielmiessler.com/study/amass/#examples

	- Reverse WHOIS(whoxy.com)

	- AdAnalytics(BuiltWith)
		- Get more routes/domains

- Enumerate seeds/roots
 	- find subdomins ( MEG etc )

	- Google Fu
	  - Find more vendors/links/attack surface
	  - "in:site" etc (see video)
	  - [uDork](//github.com/m3n0sd0n4ld/uDork)
	  - ./uDork.sh gs.com -g admin -p 1 -o ./admin-udork-gs.txt
	  - ./uDork.sh gs.com -g all
	  	- does pdf, inurl:ftp://ftp

	- Shodan
	  - more subdomains

	- Linked Discovery/Crawling
	  - Burp Pro
	  - [GoSpider](//github.com/jaeles-project/gospider)
	  - Assetfinder (Tomnomnom)
	  - FavFreak ( use favicon to link sites ): //github.com/devanshbatham/FavFreak

	- Subdomain Enumeration ( cat to output files )
	  - Assetfinder and VIM tricks
	  - `amass enum -d https://federalreserveonline.org/`
	  - `subfinder -d xx.com -o output.txt`
	  -  Subdomainizer (like assetfinder)

	- Can I takeover xyz (on any redirects)
  	  - Check if can takeover subdomain, google otherwise
      - https://github.com/EdOverflow/can-i-take-over-xyz

	- Subdomain brute forcing
	  - `amass enum -brute -d twitch.tv -src`
	  - `amass enum -brute -w wordlist.txt -d example.com`
	  - Alternative: https://github.com/assetnote/commonspeak2

	- Static analysis
	  - for more subdomains
	  - Github search Jason Haddix tool (hunter 3.0)
	  - API keys

- HTTP Probe(TomNomNom)
  - using subdomains
  - Get web servers

- Visual inspecting each site via tablist
  - ( filter list add-on to load text list)

- PortScanning (Roots, seeds, RAW domains)
  - Ronin-Scanners: //github.com/ronin-rb/ronin-scanners
  - [DNS mass scan] //github.com/rastating/dnmasscan

- Once we do a dnsmasscan on port analysis, do Nmap service scan -oG on list
- Then we can scan for remote admin protocols with BruteSpray, takes -oG file output as input

-  NMAP 
  - `nmap -oG outputfile.txt 192.168.1.1`
  - Standard service detection	`nmap -sV 192.168.1.1`
  - nmap -O -v
  - `-Pn` Ignoring discovery is often required as many firewalls or hosts will not respond to PING, so could be missed unless you select the -Pn parameter. 
  - Scan targets from a text file	`nmap -iL list-of-ips.txt`

- Nuclei List of http links (from http probe)
	Now feed to vulnerability analysis tools, for easy wins, like meg, gf nuclei
	`nuclei httprobe.txt -t cve/*
		- see templates(https://github.com/projectdiscovery/nuclei-templates)`

-  BruteSpray
  - BruteSpray takes nmap GNMAP/XML output or newline seperated JSONS and automatically brute-forces services with default credentials using Medusa.
  - BruteSpray can even find non-standard ports by using the -sV inside Nmap.

-  Eyeballing(screenshoting)
  - Eyewitness https://github.com/FortyNorthSecurity/EyeWitness
  - Build manual hacking targets

- Blind XSS payload
  - XSS hunter get payload via login
  - Go into Burp addon
  - See 1.53m

- Combine SecLists Wordlist with FFUF

- Masscan ( Port scanner )
  - `brew install masscan` 
  - (linux, clone, cd, make, make install)
  - `sudo masscan <ip-addy> -p80 --banners --router-mac 66-55-44-33-22-11`
  - masscan -p1-65535 -iL $ipFile --max-rate 1800 -oG $outPutFile.log
  - https://github.com/robertdavidgraham/masscan

- https://github.com/rastating/dnmasscan
  
  - chmod +x dnmasscan > sudo ./dnmasscan
- Then check mutations with gwdomains
- https://github.com/thelikes/gwdomains

- Dirsearch - Web path [scanner](//github.com/maurosoria/dirsearch)

## Questions on filtered websites (1.5hr in video)
  - how does it handle special characters on search forms
  - how does app reference user?  Multiple user roles?
  - dynamic parameters after spider
  - any API associated with site
  - what are parameters that reference path or URL
  - File Uploads (PDFs, etc) / multi-forms / etc
  - Business logic flows
  - Content discovery (Javascript, find paths, directory brute force )

## Tactics
  - Which domains to prioritize?
  - Help site, try to play around with
  - custom application error message = content discovery 
  - CMS = bruteforce
  - APIs = attempt to find api docs and fuzz

## See testing.txt
  - getting endpoints form js files
  - OneLiner extracts all API endpoints from AngularJS & Angular javascript files:
  - Simple Script for scanning ports of all grabbed subdomains using masscan:-

Content discovery on;
Weird stuff
Web servers
404s



